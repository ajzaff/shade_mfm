//include "cpu_gpu_shared.inl"
//include "uniforms.inl"
//include "defines.inl"
//include "globals.inl"
//include "prng.inl"
//include "atom_decls.inl"
//include "bit_packing.inl"
//include "sites.inl"
//include "atoms.inl"
//include "xoroshiro128starstar.inl"


bool isActiveMem(ivec2 vote_idx) {
	uint center_v = imageLoad(img_vote, vote_idx).x;
	const int R = EVENT_WINDOW_RADIUS*2;
    for (int y = -R; y <= R; ++y) {
        for (int x = -R; x <= R; ++x) {
            int m = abs(x) + abs(y);
            if (m <= R && !(x == 0 && y == 0)) {
				uint v = imageLoad(img_vote, vote_idx + ivec2(x,y)).x;
                if (v >= center_v) {
                    return false;
                }
            }
        }
    }
	return true;
}

void main() {

	if (stage == 0) {
		uvec2 size = imageSize(img_vote);
		ivec2 vote_idx = ivec2(gl_GlobalInvocationID.xy);

		if (vote_idx.x < size.x && vote_idx.y < size.y) { 
			_XORO = xoroshiro128_unpack(imageLoad(img_prng_state, vote_idx));
			uint center_v = XoroshiroNext32();
			imageStore(img_vote, vote_idx, uvec4(center_v));
			imageStore(img_prng_state, vote_idx, xoroshiro128_pack(_XORO));
		}
	} else if (stage == 1) {
		uvec2 size = imageSize(img_site_bits);
		ivec2 center_idx = ivec2(gl_GlobalInvocationID.xy);

		// threads may be scheduled "off the image" because they come in blocks, so make sure our thread is actually on top of a valid site
		if (center_idx.x < size.x && center_idx.y < size.y) {
			_SITE_IDX = center_idx;
			ivec2 vote_idx = _SITE_IDX +  ivec2(EVENT_WINDOW_RADIUS*2);				
			if  (isActiveMem(vote_idx)) {

				_XORO = xoroshiro128_unpack(imageLoad(img_prng_state, vote_idx));
				//uvec4 D = uvec4(0);

				Atom S = _SITE_LOAD(ivec2(0,0));
				
				_BEHAVE_DISPATCH(_UNPACK_TYPE(S));

				//D.z = 1; // #HACK site updated signal
				
				atomicAdd(stats.event_count_this_batch, 1);
				
				uint event_count = imageLoad(img_event_count, center_idx).x;
				event_count += 1;
				imageStore(img_event_count, center_idx, uvec4(event_count));
				imageStore(img_prng_state, vote_idx, xoroshiro128_pack(_XORO));
			}
			
			//imageStore(img_dev, center_idx, D);
			
		}
	}
}